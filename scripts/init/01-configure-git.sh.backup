#!/bin/bash
# -----------------------------------------------------------------------------
# Git Configuration Initialization Script
# -----------------------------------------------------------------------------
# This script sets up basic Git configuration for the development environment
# It runs during container startup to ensure Git is properly configured
# -----------------------------------------------------------------------------

set -euo pipefail

# Color codes for output formatting
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

log_info() { echo -e "${GREEN}[GIT-INIT]${NC} $*"; }
log_warn() { echo -e "${YELLOW}[GIT-INIT]${NC} $*"; }

# Default Git configuration
readonly DEFAULT_USER_NAME="Developer"
readonly DEFAULT_USER_EMAIL="dev@example.com"
readonly DEFAULT_INIT_BRANCH="main"

configure_git() {
    log_info "Configuring Git settings..."
    
    # Set default user name if not already set
    if ! git config --global user.name >/dev/null 2>&1; then
        git config --global user.name "${GIT_USER_NAME:-$DEFAULT_USER_NAME}"
        log_info "Set Git user.name to: $(git config --global user.name)"
    else
        log_info "Git user.name already set: $(git config --global user.name)"
    fi
    
    # Set default user email if not already set
    if ! git config --global user.email >/dev/null 2>&1; then
        git config --global user.email "${GIT_USER_EMAIL:-$DEFAULT_USER_EMAIL}"
        log_info "Set Git user.email to: $(git config --global user.email)"
    else
        log_info "Git user.email already set: $(git config --global user.email)"
    fi
    
    # Set default branch name
    git config --global init.defaultBranch "$DEFAULT_INIT_BRANCH"
    log_info "Set default branch to: $DEFAULT_INIT_BRANCH"
    
    # Configure credential helper for HTTPS
    git config --global credential.helper store
    log_info "Configured credential helper: store"
    
    # Set up Git LFS
    if command -v git-lfs >/dev/null 2>&1; then
        git lfs install --system 2>/dev/null || git lfs install
        log_info "Git LFS initialized"
    fi
    
    # Configure useful Git aliases
    git config --global alias.st status
    git config --global alias.co checkout
    git config --global alias.br branch
    git config --global alias.ci commit
    git config --global alias.unstage 'reset HEAD --'
    git config --global alias.last 'log -1 HEAD'
    git config --global alias.visual '!gitk'
    git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
    log_info "Configured Git aliases"
    
    # Configure core settings
    git config --global core.editor "nvim"
    git config --global core.autocrlf input
    git config --global core.safecrlf false
    log_info "Configured Git core settings"
    
    # Configure push and pull behavior
    git config --global push.default simple
    git config --global pull.rebase false
    log_info "Configured Git push/pull behavior"
    
    log_info "Git configuration completed"
}

main() {
    log_info "Starting Git configuration..."
    
    # Check if Git is available
    if ! command -v git >/dev/null 2>&1; then
        log_warn "Git is not installed, skipping Git configuration"
        exit 0
    fi
    
    configure_git
    
    log_info "Git initialization completed successfully"
}

# Only run if called directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
