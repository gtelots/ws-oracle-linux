#!/bin/bash
# =============================================================================
# SSH Deployment and Configuration Script
# =============================================================================
# DESCRIPTION: Comprehensive SSH server and client configuration script
#              supporting both incoming and outgoing SSH connections
# AUTHOR: Truong Thanh Tung <ttungbmt@gmail.com>
# VERSION: 1.0.0
# =============================================================================

# Load libraries
. /opt/laragis/lib/bootstrap.sh
. /opt/laragis/lib/log.sh

# =============================================================================
# CONFIGURATION VARIABLES
# =============================================================================

# SSH Server Configuration
readonly SSH_PORT="${SSH_PORT:-2222}"
readonly SSH_CONFIG_FILE="/etc/ssh/sshd_config"
readonly SSH_HOST_KEYS_DIR="/etc/ssh"
readonly SSH_LOG_LEVEL="${SSH_LOG_LEVEL:-INFO}"
readonly SSH_MAX_AUTH_TRIES="${SSH_MAX_AUTH_TRIES:-3}"
readonly SSH_MAX_SESSIONS="${SSH_MAX_SESSIONS:-10}"
readonly SSH_LOGIN_GRACE_TIME="${SSH_LOGIN_GRACE_TIME:-60}"
readonly SSH_CLIENT_ALIVE_INTERVAL="${SSH_CLIENT_ALIVE_INTERVAL:-300}"
readonly SSH_CLIENT_ALIVE_COUNT_MAX="${SSH_CLIENT_ALIVE_COUNT_MAX:-2}"

# SSH Client Configuration
readonly SSH_CLIENT_CONFIG_FILE="/etc/ssh/ssh_config"
readonly SSH_USER_CONFIG_DIR="/home/${USER_NAME}/.ssh"
readonly SSH_AUTHORIZED_KEYS_FILE="${SSH_USER_CONFIG_DIR}/authorized_keys"
readonly SSH_KNOWN_HOSTS_FILE="${SSH_USER_CONFIG_DIR}/known_hosts"

# Security Configuration
readonly PERMIT_ROOT_LOGIN="${PERMIT_ROOT_LOGIN:-no}"
readonly PASSWORD_AUTHENTICATION="${PASSWORD_AUTHENTICATION:-yes}"
readonly PUBKEY_AUTHENTICATION="${PUBKEY_AUTHENTICATION:-yes}"
readonly CHALLENGE_RESPONSE_AUTH="${CHALLENGE_RESPONSE_AUTH:-no}"
readonly KERBEROS_AUTHENTICATION="${KERBEROS_AUTHENTICATION:-no}"
readonly GSSAPI_AUTHENTICATION="${GSSAPI_AUTHENTICATION:-no}"

# =============================================================================
# UTILITY FUNCTIONS
# =============================================================================

# Check if SSH server is installed
check_ssh_server() {
    log_info "Checking SSH server installation..."
    
    if ! command -v sshd >/dev/null 2>&1; then
        log_warn "SSH server not found, installing..."
        if ! pkg-install openssh-server; then
            log_error "Failed to install SSH server"
            return 1
        fi
    fi
    
    log_info "✓ SSH server is available"
    return 0
}

# Check if SSH client is installed
check_ssh_client() {
    log_info "Checking SSH client installation..."
    
    if ! command -v ssh >/dev/null 2>&1; then
        log_warn "SSH client not found, installing..."
        if ! pkg-install openssh-clients; then
            log_error "Failed to install SSH client"
            return 1
        fi
    fi
    
    log_info "✓ SSH client is available"
    return 0
}

# Generate SSH host keys
generate_host_keys() {
    log_info "Generating SSH host keys..."
    
    # Create SSH directory if it doesn't exist
    mkdir -p "${SSH_HOST_KEYS_DIR}"
    
    # Generate host keys if they don't exist
    if [[ ! -f "${SSH_HOST_KEYS_DIR}/ssh_host_rsa_key" ]]; then
        log_info "Generating RSA host key..."
        ssh-keygen -t rsa -b 4096 -f "${SSH_HOST_KEYS_DIR}/ssh_host_rsa_key" -N "" -q
    fi
    
    if [[ ! -f "${SSH_HOST_KEYS_DIR}/ssh_host_ecdsa_key" ]]; then
        log_info "Generating ECDSA host key..."
        ssh-keygen -t ecdsa -b 521 -f "${SSH_HOST_KEYS_DIR}/ssh_host_ecdsa_key" -N "" -q
    fi
    
    if [[ ! -f "${SSH_HOST_KEYS_DIR}/ssh_host_ed25519_key" ]]; then
        log_info "Generating Ed25519 host key..."
        ssh-keygen -t ed25519 -f "${SSH_HOST_KEYS_DIR}/ssh_host_ed25519_key" -N "" -q
    fi
    
    # Set proper permissions
    chmod 600 "${SSH_HOST_KEYS_DIR}"/ssh_host_*_key
    chmod 644 "${SSH_HOST_KEYS_DIR}"/ssh_host_*_key.pub
    
    log_info "✓ SSH host keys generated successfully"
}

# =============================================================================
# SSH SERVER CONFIGURATION
# =============================================================================

configure_ssh_server() {
    log_info "Configuring SSH server with security hardening..."
    
    # Backup original configuration
    if [[ -f "${SSH_CONFIG_FILE}" ]]; then
        cp "${SSH_CONFIG_FILE}" "${SSH_CONFIG_FILE}.backup.$(date +%Y%m%d_%H%M%S)"
        log_info "✓ Original SSH config backed up"
    fi
    
    # Create secure SSH server configuration
    cat > "${SSH_CONFIG_FILE}" << EOF
# SSH Server Configuration - Security Hardened
# Generated by ssh-deployment.sh on $(date)

# Network Configuration
Port ${SSH_PORT}
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::

# Protocol and Encryption
Protocol 2
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512

# Host Keys
HostKey ${SSH_HOST_KEYS_DIR}/ssh_host_rsa_key
HostKey ${SSH_HOST_KEYS_DIR}/ssh_host_ecdsa_key
HostKey ${SSH_HOST_KEYS_DIR}/ssh_host_ed25519_key

# Authentication Configuration
PermitRootLogin ${PERMIT_ROOT_LOGIN}
PasswordAuthentication ${PASSWORD_AUTHENTICATION}
PubkeyAuthentication ${PUBKEY_AUTHENTICATION}
AuthorizedKeysFile .ssh/authorized_keys
AuthorizedKeysCommand none
AuthorizedKeysCommandUser nobody

# Security Settings
MaxAuthTries ${SSH_MAX_AUTH_TRIES}
MaxSessions ${SSH_MAX_SESSIONS}
MaxStartups 10:30:100
LoginGraceTime ${SSH_LOGIN_GRACE_TIME}
ClientAliveInterval ${SSH_CLIENT_ALIVE_INTERVAL}
ClientAliveCountMax ${SSH_CLIENT_ALIVE_COUNT_MAX}
TCPKeepAlive yes

# Disable Unused Authentication Methods
ChallengeResponseAuthentication ${CHALLENGE_RESPONSE_AUTH}
KerberosAuthentication ${KERBEROS_AUTHENTICATION}
GSSAPIAuthentication ${GSSAPI_AUTHENTICATION}
UsePAM yes
PermitEmptyPasswords no
PermitUserEnvironment no

# Logging Configuration
SyslogFacility AUTH
LogLevel ${SSH_LOG_LEVEL}

# Subsystem Configuration
Subsystem sftp /usr/libexec/openssh/sftp-server

# Security Restrictions
AllowUsers ${USER_NAME}
DenyUsers root
X11Forwarding yes
X11DisplayOffset 10
X11UseLocalhost yes
PrintMotd no
PrintLastLog yes
Banner none

# Compression
Compression delayed
EOF
    
    log_info "✓ SSH server configuration created"
}

# =============================================================================
# SSH CLIENT CONFIGURATION
# =============================================================================

configure_ssh_client() {
    log_info "Configuring SSH client with security best practices..."
    
    # Create global SSH client configuration
    cat > "${SSH_CLIENT_CONFIG_FILE}" << EOF
# SSH Client Configuration - Security Optimized
# Generated by ssh-deployment.sh on $(date)

# Global SSH Client Settings
Host *
    # Security Settings
    Protocol 2
    ForwardAgent no
    ForwardX11 no
    ForwardX11Trusted no
    
    # Connection Settings
    ServerAliveInterval 60
    ServerAliveCountMax 3
    ConnectTimeout 30
    
    # Encryption Settings
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
    MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512
    KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256
    
    # Host Key Verification
    StrictHostKeyChecking ask
    VerifyHostKeyDNS ask
    
    # Authentication
    PubkeyAuthentication yes
    PasswordAuthentication yes
    PreferredAuthentications publickey,password
    
    # Disable unused features
    GSSAPIAuthentication no
    HashKnownHosts yes
    
# Example host configurations (uncomment and modify as needed)
# Host myserver
#     HostName server.example.com
#     Port 2222
#     User myuser
#     IdentityFile ~/.ssh/id_rsa
#     StrictHostKeyChecking yes

# Host jumphost
#     HostName jump.example.com
#     Port 22
#     User jumpuser
#     ProxyJump none
EOF
    
    log_info "✓ SSH client configuration created"
}

# =============================================================================
# USER SSH CONFIGURATION
# =============================================================================

setup_user_ssh() {
    log_info "Setting up SSH configuration for user: ${USER_NAME}..."
    
    # Create user SSH directory
    mkdir -p "${SSH_USER_CONFIG_DIR}"
    
    # Set proper ownership and permissions
    chown "${USER_UID}:${USER_GID}" "${SSH_USER_CONFIG_DIR}"
    chmod 700 "${SSH_USER_CONFIG_DIR}"
    
    # Create authorized_keys file if it doesn't exist
    if [[ ! -f "${SSH_AUTHORIZED_KEYS_FILE}" ]]; then
        touch "${SSH_AUTHORIZED_KEYS_FILE}"
        chown "${USER_UID}:${USER_GID}" "${SSH_AUTHORIZED_KEYS_FILE}"
        chmod 600 "${SSH_AUTHORIZED_KEYS_FILE}"
        log_info "✓ Created authorized_keys file"
    fi
    
    # Create known_hosts file if it doesn't exist
    if [[ ! -f "${SSH_KNOWN_HOSTS_FILE}" ]]; then
        touch "${SSH_KNOWN_HOSTS_FILE}"
        chown "${USER_UID}:${USER_GID}" "${SSH_KNOWN_HOSTS_FILE}"
        chmod 644 "${SSH_KNOWN_HOSTS_FILE}"
        log_info "✓ Created known_hosts file"
    fi
    
    # Create user SSH config if it doesn't exist
    local user_ssh_config="${SSH_USER_CONFIG_DIR}/config"
    if [[ ! -f "${user_ssh_config}" ]]; then
        cat > "${user_ssh_config}" << EOF
# User SSH Configuration
# Generated by ssh-deployment.sh on $(date)

# Default settings for all hosts
Host *
    ServerAliveInterval 60
    ServerAliveCountMax 3
    ConnectTimeout 30
    StrictHostKeyChecking ask
    UserKnownHostsFile ~/.ssh/known_hosts
    IdentitiesOnly yes
    
# Add your custom host configurations below
# Example:
# Host myserver
#     HostName server.example.com
#     Port 2222
#     User myuser
#     IdentityFile ~/.ssh/id_rsa
EOF
        
        chown "${USER_UID}:${USER_GID}" "${user_ssh_config}"
        chmod 600 "${user_ssh_config}"
        log_info "✓ Created user SSH config"
    fi
    
    log_info "✓ User SSH configuration completed"
}

# =============================================================================
# KEY MANAGEMENT FUNCTIONS
# =============================================================================

generate_user_ssh_keys() {
    log_info "Generating SSH key pairs for user: ${USER_NAME}..."

    local key_types=("rsa" "ecdsa" "ed25519")
    local key_sizes=("4096" "521" "")

    for i in "${!key_types[@]}"; do
        local key_type="${key_types[$i]}"
        local key_size="${key_sizes[$i]}"
        local key_file="${SSH_USER_CONFIG_DIR}/id_${key_type}"

        if [[ ! -f "${key_file}" ]]; then
            log_info "Generating ${key_type} key pair..."

            local ssh_keygen_cmd="ssh-keygen -t ${key_type}"
            if [[ -n "${key_size}" ]]; then
                ssh_keygen_cmd+=" -b ${key_size}"
            fi
            ssh_keygen_cmd+=" -f ${key_file} -N '' -C '${USER_NAME}@$(hostname)' -q"

            if eval "${ssh_keygen_cmd}"; then
                chown "${USER_UID}:${USER_GID}" "${key_file}" "${key_file}.pub"
                chmod 600 "${key_file}"
                chmod 644 "${key_file}.pub"
                log_info "✓ Generated ${key_type} key pair"
            else
                log_error "Failed to generate ${key_type} key pair"
            fi
        else
            log_info "✓ ${key_type} key pair already exists"
        fi
    done
}

install_public_key() {
    local public_key="$1"
    local key_comment="${2:-Added by ssh-deployment.sh}"

    if [[ -z "${public_key}" ]]; then
        log_error "Public key is required"
        return 1
    fi

    log_info "Installing public key to authorized_keys..."

    # Validate public key format
    if ! echo "${public_key}" | ssh-keygen -l -f - >/dev/null 2>&1; then
        log_error "Invalid public key format"
        return 1
    fi

    # Add key to authorized_keys if not already present
    if ! grep -Fxq "${public_key}" "${SSH_AUTHORIZED_KEYS_FILE}"; then
        echo "# ${key_comment} - $(date)" >> "${SSH_AUTHORIZED_KEYS_FILE}"
        echo "${public_key}" >> "${SSH_AUTHORIZED_KEYS_FILE}"
        log_info "✓ Public key installed successfully"
    else
        log_info "✓ Public key already exists in authorized_keys"
    fi
}

# =============================================================================
# CONNECTION TESTING AND VALIDATION
# =============================================================================

test_ssh_connection() {
    local host="${1:-localhost}"
    local port="${2:-${SSH_PORT}}"
    local user="${3:-${USER_NAME}}"
    local timeout="${4:-10}"

    log_info "Testing SSH connection to ${user}@${host}:${port}..."

    # Test connection without authentication
    if timeout "${timeout}" ssh -o BatchMode=yes -o ConnectTimeout="${timeout}" \
       -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
       -p "${port}" "${user}@${host}" exit 2>/dev/null; then
        log_info "✓ SSH connection test successful"
        return 0
    else
        log_warn "SSH connection test failed (this may be expected if authentication is required)"
        return 1
    fi
}

validate_ssh_config() {
    log_info "Validating SSH server configuration..."

    # Test SSH daemon configuration
    if sshd -t -f "${SSH_CONFIG_FILE}" 2>/dev/null; then
        log_info "✓ SSH server configuration is valid"
    else
        log_error "SSH server configuration validation failed"
        sshd -t -f "${SSH_CONFIG_FILE}"
        return 1
    fi

    # Check if SSH service can start
    if systemctl is-active --quiet sshd 2>/dev/null; then
        log_info "✓ SSH service is running"
    else
        log_info "SSH service is not running (this is normal in containers)"
    fi

    return 0
}

# =============================================================================
# FIREWALL AND SECURITY CONFIGURATION
# =============================================================================

configure_firewall() {
    log_info "Configuring firewall for SSH access..."

    # Check if firewalld is available and running
    if command -v firewall-cmd >/dev/null 2>&1 && systemctl is-active --quiet firewalld; then
        log_info "Configuring firewalld for SSH port ${SSH_PORT}..."

        # Add SSH port to firewall
        if firewall-cmd --permanent --add-port="${SSH_PORT}/tcp" >/dev/null 2>&1; then
            firewall-cmd --reload >/dev/null 2>&1
            log_info "✓ Firewall configured for SSH port ${SSH_PORT}"
        else
            log_warn "Failed to configure firewall (may require elevated privileges)"
        fi
    else
        log_info "Firewalld not available or not running, skipping firewall configuration"
    fi
}

# =============================================================================
# SERVICE MANAGEMENT
# =============================================================================

start_ssh_service() {
    log_info "Starting SSH service..."

    # In container environments, we typically don't use systemd
    if [[ -f /.dockerenv ]] || [[ "${container}" == "docker" ]]; then
        log_info "Container environment detected, SSH will be managed by supervisor"

        # Create supervisor configuration for SSH
        local supervisor_ssh_conf="/etc/supervisor/conf.d/sshd.conf"
        mkdir -p "$(dirname "${supervisor_ssh_conf}")"

        cat > "${supervisor_ssh_conf}" << EOF
[program:sshd]
command=/usr/sbin/sshd -D -f ${SSH_CONFIG_FILE}
autostart=true
autorestart=true
startretries=3
user=root
redirect_stderr=true
stdout_logfile=/var/log/supervisor/sshd.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
EOF

        log_info "✓ SSH supervisor configuration created"
    else
        # Traditional system service management
        if systemctl enable sshd >/dev/null 2>&1 && systemctl start sshd >/dev/null 2>&1; then
            log_info "✓ SSH service started and enabled"
        else
            log_warn "Failed to start SSH service via systemctl"
        fi
    fi
}

# =============================================================================
# MAIN EXECUTION FUNCTIONS
# =============================================================================

install_ssh_server() {
    log_info "Installing and configuring SSH server..."

    check_ssh_server || return 1
    generate_host_keys || return 1
    configure_ssh_server || return 1
    setup_user_ssh || return 1
    configure_firewall
    validate_ssh_config || return 1
    start_ssh_service

    log_info "✓ SSH server installation and configuration completed"
    log_info "SSH server is configured to listen on port ${SSH_PORT}"
    log_info "User '${USER_NAME}' can connect via SSH"
}

install_ssh_client() {
    log_info "Installing and configuring SSH client..."

    check_ssh_client || return 1
    configure_ssh_client || return 1
    setup_user_ssh || return 1

    # Optionally generate user SSH keys
    if [[ "${GENERATE_USER_KEYS:-true}" == "true" ]]; then
        generate_user_ssh_keys
    fi

    log_info "✓ SSH client installation and configuration completed"
}

# =============================================================================
# MAIN SCRIPT EXECUTION
# =============================================================================

main() {
    local action="${1:-both}"

    log_info "Starting SSH deployment script..."
    log_info "Action: ${action}"
    log_info "SSH Port: ${SSH_PORT}"
    log_info "User: ${USER_NAME} (UID: ${USER_UID}, GID: ${USER_GID})"

    case "${action}" in
        "server")
            install_ssh_server
            ;;
        "client")
            install_ssh_client
            ;;
        "both"|*)
            install_ssh_server
            install_ssh_client
            ;;
    esac

    local exit_code=$?

    if [[ ${exit_code} -eq 0 ]]; then
        log_info "✅ SSH deployment completed successfully!"
        log_info ""
        log_info "Next steps:"
        log_info "1. Add your public keys to: ${SSH_AUTHORIZED_KEYS_FILE}"
        log_info "2. Test SSH connection: ssh -p ${SSH_PORT} ${USER_NAME}@localhost"
        log_info "3. Configure your SSH client in: ${SSH_USER_CONFIG_DIR}/config"
        log_info ""
        log_info "Security notes:"
        log_info "- SSH server is configured with security hardening"
        log_info "- Root login is disabled"
        log_info "- Strong encryption ciphers are enforced"
        log_info "- Connection limits and timeouts are configured"
    else
        log_error "❌ SSH deployment failed with exit code: ${exit_code}"
    fi

    return ${exit_code}
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
