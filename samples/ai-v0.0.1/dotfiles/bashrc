# Oracle Linux 9 Development Container - Enhanced Bash Configuration
# Following Laravel Homestead convenience patterns and modern CLI best practices
# Productivity-focused with security-conscious defaults

# =============================================================================
# Environment Setup
# =============================================================================

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Set default editor and pager
export EDITOR=vim
export PAGER=less
export BROWSER=firefox

# History configuration
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE="ls:ll:la:cd:pwd:exit:date:history"
export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S "

# Append to history file, don't overwrite
shopt -s histappend

# Check window size after each command
shopt -s checkwinsize

# Enable extended globbing
shopt -s extglob

# Case-insensitive globbing
shopt -s nocaseglob

# Correct minor errors in directory names
shopt -s cdspell

# =============================================================================
# Color Configuration
# =============================================================================

# Enable color support
if [[ -x /usr/bin/dircolors ]]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Color definitions
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[1;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export WHITE='\033[1;37m'
export NC='\033[0m' # No Color

# =============================================================================
# Enhanced Prompt Configuration
# =============================================================================

# Git branch detection function
git_branch() {
    local branch
    if branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); then
        if [[ $branch == "HEAD" ]]; then
            branch='detached*'
        fi
        echo " ($branch)"
    fi
}

# Git status indicators
git_status() {
    local status=""
    if git rev-parse --git-dir > /dev/null 2>&1; then
        if [[ -n $(git status --porcelain 2>/dev/null) ]]; then
            status="*"
        fi
        if [[ -n $(git log --branches --not --remotes --oneline 2>/dev/null) ]]; then
            status="${status}‚Üë"
        fi
        if [[ -n $(git log --remotes --not --branches --oneline 2>/dev/null) ]]; then
            status="${status}‚Üì"
        fi
        echo "$status"
    fi
}

# Docker context detection
docker_context() {
    if [[ -f /.dockerenv ]]; then
        echo " üê≥"
    fi
}

# Kubernetes context detection
k8s_context() {
    if command -v kubectl &> /dev/null && kubectl config current-context &> /dev/null; then
        local context
        context=$(kubectl config current-context 2>/dev/null)
        echo " ‚éà $context"
    fi
}

# Enhanced prompt with git, docker, and k8s info
PS1='\[\e[1;32m\]\u@\h\[\e[0m\]$(docker_context)\[\e[1;34m\] \w\[\e[1;33m\]$(git_branch)\[\e[1;31m\]$(git_status)\[\e[1;36m\]$(k8s_context)\[\e[0m\]\n\$ '

# =============================================================================
# Path Configuration
# =============================================================================

# Add local bin directories to PATH
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="/usr/local/bin:$PATH"

# Add language-specific paths
export PATH="$HOME/.cargo/bin:$PATH"  # Rust
export PATH="/usr/local/go/bin:$PATH"  # Go
export PATH="$HOME/go/bin:$PATH"  # Go workspace

# Node.js global modules
export PATH="$HOME/.npm-global/bin:$PATH"

# Python user packages
export PATH="$HOME/.local/bin:$PATH"

# =============================================================================
# Development Environment Variables
# =============================================================================

# Go configuration
export GOPATH="$HOME/go"
export GOPROXY=https://proxy.golang.org,direct
export GOSUMDB=sum.golang.org

# Node.js configuration
export NODE_ENV=development
export NPM_CONFIG_PREFIX="$HOME/.npm-global"

# Python configuration
export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
export PIP_USER=yes

# Docker configuration
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

# =============================================================================
# Completion and Interactive Features
# =============================================================================

# Enable bash completion
if [[ -f /usr/share/bash-completion/bash_completion ]]; then
    source /usr/share/bash-completion/bash_completion
elif [[ -f /etc/bash_completion ]]; then
    source /etc/bash_completion
fi

# Enable kubectl completion if available
if command -v kubectl &> /dev/null; then
    source <(kubectl completion bash)
fi

# Enable helm completion if available
if command -v helm &> /dev/null; then
    source <(helm completion bash)
fi

# Enable docker completion if available
if [[ -f /usr/share/bash-completion/completions/docker ]]; then
    source /usr/share/bash-completion/completions/docker
fi

# =============================================================================
# Custom Functions
# =============================================================================

# Quick directory navigation
up() {
    local levels=${1:-1}
    local path=""
    for ((i=0; i<levels; i++)); do
        path="../$path"
    done
    cd "$path" || return
}

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1" || return
}

# Extract various archive formats
extract() {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find and kill process by name
killp() {
    local process_name="$1"
    if [[ -z "$process_name" ]]; then
        echo "Usage: killp <process_name>"
        return 1
    fi
    
    local pids
    pids=$(pgrep -f "$process_name")
    if [[ -n "$pids" ]]; then
        echo "Killing processes matching '$process_name':"
        echo "$pids" | xargs ps -p
        echo "$pids" | xargs kill
    else
        echo "No processes found matching '$process_name'"
    fi
}

# Quick git status and branch info
gs() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        echo -e "${BLUE}Repository:${NC} $(basename "$(git rev-parse --show-toplevel)")"
        echo -e "${BLUE}Branch:${NC} $(git branch --show-current)"
        echo -e "${BLUE}Status:${NC}"
        git status --short
        echo -e "${BLUE}Recent commits:${NC}"
        git log --oneline -5
    else
        echo "Not in a git repository"
    fi
}

# Docker container management shortcuts
dps() { docker ps "$@"; }
dpsa() { docker ps -a "$@"; }
dimg() { docker images "$@"; }
dexec() { docker exec -it "$1" "${2:-bash}"; }
dlogs() { docker logs -f "$@"; }

# Kubernetes shortcuts
k() { kubectl "$@"; }
kgp() { kubectl get pods "$@"; }
kgs() { kubectl get services "$@"; }
kgd() { kubectl get deployments "$@"; }
kdesc() { kubectl describe "$@"; }
klogs() { kubectl logs -f "$@"; }

# =============================================================================
# Load Additional Configuration
# =============================================================================

# Load aliases
if [[ -f ~/.config/aliases ]]; then
    source ~/.config/aliases
fi

# Load local customizations
if [[ -f ~/.bashrc.local ]]; then
    source ~/.bashrc.local
fi

# Load work-specific configuration
if [[ -f ~/.bashrc.work ]]; then
    source ~/.bashrc.work
fi

# =============================================================================
# Welcome Message
# =============================================================================

# Display welcome message for interactive shells
if [[ $- == *i* ]]; then
    echo -e "${GREEN}Welcome to Oracle Linux 9 Development Container!${NC}"
    echo -e "${BLUE}Container:${NC} $(hostname)"
    echo -e "${BLUE}User:${NC} $(whoami) (UID: $EUID)"
    echo -e "${BLUE}Workspace:${NC} ${WORKSPACE_DIR:-/workspace}"
    echo -e "${BLUE}Shell:${NC} $BASH_VERSION"
    
    if command -v git &> /dev/null && git rev-parse --git-dir > /dev/null 2>&1; then
        echo -e "${BLUE}Git:${NC} $(git branch --show-current) $(git_status)"
    fi
    
    if [[ -f /.dockerenv ]]; then
        echo -e "${BLUE}Environment:${NC} Docker Container üê≥"
    fi
    
    echo ""
fi
