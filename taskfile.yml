# https://taskfile.dev

version: '3'

env:
  DOCKER_BUILDKIT: 1

dotenv: [".env"]

tasks:
  default:
    desc: Show available commands
    silent: true
    cmds:
      - |
        echo ""
        echo "Oracle Linux Development Container"
        echo "=================================="
        echo ""
        echo "Container Management"
        echo "  task up                     Start the development container"
        echo "  task down                   Stop the development container"
        echo "  task restart                Restart the development container"
        echo "  task build                  Build the container image"
        echo "  task rebuild                Rebuild and restart the container"
        echo ""
        echo "Development"
        echo "  task shell                  Open a shell in the container"
        echo "  task root                   Open a shell as root user"
        echo "  task ssh                    SSH into the container"
        echo ""
        echo "Information"
        echo "  task ps                     Show container status"
        echo "  task logs                   Show container logs"
        echo "  task tools                  List installed tools"
        echo "  task health                 Check container health"
        echo ""
        echo "Utilities"
        echo "  task clean                  Clean up Docker resources"
        echo "  task fresh                  Fresh install (rebuild everything)"
        echo ""

  up:
    desc: Start the development container
    cmds:
      - echo "Starting container..."
      - docker compose up -d
      - echo "Container started successfully!"
      - echo "SSH access via ssh -p 2222 dev@localhost"

  down:
    desc: Stop the development container
    cmds:
      - echo "Stopping container..."
      - docker compose down
      - echo "Container stopped successfully!"

  restart:
    desc: Restart the development container
    cmds:
      - echo "Restarting container..."
      - docker compose restart
      - echo "Container restarted successfully!"

  build:
    desc: Build the container image
    cmds:
      - echo "Building container image..."
      - docker compose build
      - echo "Build completed successfully!"

  rebuild:
    desc: Rebuild and restart the container
    cmds:
      - echo "Rebuilding container..."
      - task: down
      - task: build
      - task: up

  fresh:
    desc: Fresh install - rebuild everything from scratch
    cmds:
      - echo "Fresh install - cleaning and rebuilding..."
      - docker compose down -v --remove-orphans
      - docker system prune -f
      - docker compose build --no-cache
      - docker compose up -d
      - echo "Fresh install completed!"

  shell:
    desc: Open an interactive shell in the container
    cmds:
      - docker compose exec workspace bash

  root:
    desc: Open an interactive shell as root user
    cmds:
      - docker compose exec --user root workspace bash

  ssh:
    desc: SSH into the container
    cmds:
      - ssh -p 2222 dev@localhost

  ps:
    desc: Show container status
    cmds:
      - docker compose ps

  logs:
    desc: Display container logs
    cmds:
      - docker compose logs -f workspace

  tools:
    desc: List installed development tools
    cmds:
      - echo "Development Tools Status"
      - echo "========================"
      - |
        docker compose exec workspace bash -c '
        echo "Core Tools-"
        echo "  Python     $(python3 --version 2>/dev/null || echo "Not installed")"
        echo "  Node.js    $(node --version 2>/dev/null || echo "Not installed")"
        echo "  Git        $(git --version 2>/dev/null || echo "Not installed")"
        echo ""
        echo "CLI Tools-"
        echo "  task       $(task --version 2>/dev/null || echo "Not installed")"
        echo "  terraform  $(terraform version 2>/dev/null | head -1 || echo "Not installed")"
        echo "  wp         $(wp --version 2>/dev/null || echo "Not installed")"
        echo "  dry        $(dry --version 2>/dev/null || echo "Not installed")"
        echo "  ngrok      $(ngrok version 2>/dev/null | head -1 || echo "Not installed")"
        echo ""
        echo "Services-"
        if command -v supervisorctl >/dev/null 2>&1; then
          echo "  Supervisor Installed"
          supervisorctl status 2>/dev/null || echo "    (not running)"
        else
          echo "  Supervisor Not installed"
        fi
        '

  health:
    desc: Check container health and services
    cmds:
      - echo "Health Check"
      - echo "============"
      - |
        if docker compose ps | grep -q "Up"; then
          echo "Container is running"
          echo ""
          echo "Service Status-"
          docker compose exec workspace bash -c '
          if pgrep sshd >/dev/null; then
            echo "  SSH        Running"
          else
            echo "  SSH        Not running"
          fi
          
          if pgrep supervisord >/dev/null; then
            echo "  Supervisor Running"
            supervisorctl status 2>/dev/null | sed "s/^/    /"
          else
            echo "  Supervisor Not running"
          fi
          
          if pgrep dockerd >/dev/null; then
            echo "  Docker     Running"
          elif command -v docker >/dev/null 2>&1; then
            echo "  Docker     Installed but not running"
          else
            echo "  Docker     Not installed"
          fi
          '
        else
          echo "Container is not running"
          echo "Run 'task up' to start the container"
        fi

  clean:
    desc: Clean up Docker resources
    cmds:
      - echo "Cleaning up Docker resources..."
      - docker system prune -f
      - echo "Cleanup completed!"

  clean-all:
    desc: Full cleanup including images and volumes
    cmds:
      - echo "Full Docker cleanup..."
      - docker compose down -v --remove-orphans
      - docker system prune -af
      - docker volume prune -f
      - echo "Full cleanup completed!"
