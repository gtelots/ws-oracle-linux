# Taskfile.yml
version: "3"

# Auto-load environment variables from .env (if present)
dotenv: [".env"]

vars:
  # Path to env file used by docker compose
  ENV_FILE: '{{.ENV_FILE | default ".env"}}'

  # Space-separated list of compose files; missing files are ignored safely
  # Example: "docker-compose.yml docker-compose.override.yml docker-compose.prod.yml"
  COMPOSE_FILES: '{{.COMPOSE_FILES | default "docker-compose.yml docker-compose.override.yml"}}'

  # Compose project name defaults to current folder name
  PROJECT_NAME:
    sh: basename "$PWD"

tasks:
  help:
    desc: Show common docker compose tasks & usage
    silent: true
    cmds:
      - |
        echo ""
        echo "Docker Compose helper via Taskfile"
        echo "----------------------------------"
        echo "Usage: task <task> [VAR=val ...] [-- <extra docker compose args>]"
        echo ""
        echo "Common:"
        echo "  task up                # Start all services"
        echo "  task up SERVICE=web    # Start a specific service"
        echo "  task down              # Stop & remove containers"
        echo "  task build             # Build images"
        echo "  task rebuild           # Build --no-cache & recreate"
        echo "  task logs SERVICE=web  # Tail logs of a service"
        echo "  task ps                # Show container status"
        echo "  task sh SERVICE=web    # Open an interactive shell inside a service"
        echo "  task exec SERVICE=web CMD='ls -la'  # Run a command inside a service"
        echo "  task scale SERVICE=web REPLICAS=3   # Scale one service"
        echo "  task recreate SERVICE=web           # Force recreate"
        echo "  task prune             # Prune Docker system & volumes (DANGEROUS)"
        echo "  task compose -- <args> # Run raw 'docker compose <args>'"
        echo ""
        echo "Vars:"
        echo "  ENV_FILE=.env"
        echo "  COMPOSE_FILES='docker-compose.yml docker-compose.override.yml'"
        echo "  PROJECT_NAME=$(basename \"$PWD\")"
        echo ""
        echo "Examples:"
        echo "  task up -- --profile dev                   # use a profile"
        echo "  task logs SERVICE=api TAIL=500             # show last 500 lines"
        echo "  task down VOLUMES=true                     # remove volumes too"
        echo "  task compose -- config                     # print resolved config"
        echo ""

  build:
    cmds:
      - docker compose build

  up:
    cmds:
      - docker compose up -d
  
  shell:
    cmds:
      - docker compose exec workspace zsh

  reup:
    cmds:
      - docker compose down
      - docker compose up -d

  # check:
  #   desc: Check Docker & Compose availability
  #   cmds:
  #     - docker --version
  #     - docker compose version

  # # Internal helper: build docker compose CLI args from COMPOSE_FILES + ENV_FILE
  # _compose:
  #   internal: true
  #   silent: true
  #   cmds:
  #     - |
  #       FILE_ARGS=""
  #       for f in {{.COMPOSE_FILES}}; do
  #         [ -f "$f" ] && FILE_ARGS="$FILE_ARGS -f $f"
  #       done
  #       export COMPOSE_PROJECT_NAME="{{.PROJECT_NAME}}"
  #       docker compose $FILE_ARGS --env-file {{.ENV_FILE}} {{.CLI_ARGS}}

  # compose:
  #   desc: Run raw 'docker compose' with CLI_ARGS after '--'
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: '{{.CLI_ARGS}}' }

  # up:
  #   desc: Start services in background (option: SERVICE=web)
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'up -d {{.SERVICE}} {{.EXTRA}}' }
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'
  #     EXTRA: '{{.EXTRA | default ""}}'

  # down:
  #   desc: Stop and remove containers (options: VOLUMES=true, ORPHANS=true)
  #   cmds:
  #     - |
  #       VFLAGS=""
  #       [ "{{.VOLUMES}}" = "true" ] && VFLAGS="$VFLAGS -v"
  #       [ "{{.ORPHANS}}" = "true" ] && VFLAGS="$VFLAGS --remove-orphans"
  #       task _compose -- down $VFLAGS
  #   vars:
  #     VOLUMES: '{{.VOLUMES | default "false"}}'
  #     ORPHANS: '{{.ORPHANS | default "true"}}'

  # build:
  #   desc: Build images (option: SERVICE=web)
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'build {{.SERVICE}} {{.EXTRA}}' }
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'
  #     EXTRA: '{{.EXTRA | default ""}}'

  # rebuild:
  #   desc: Rebuild images without cache and recreate containers
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'build --no-cache {{.SERVICE}}' }
  #     - task: _compose
  #       vars: { CLI_ARGS: 'up -d --force-recreate --remove-orphans {{.SERVICE}}' }
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'

  # restart:
  #   desc: Restart services (option: SERVICE=web)
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'restart {{.SERVICE}}' }
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'

  # logs:
  #   desc: Tail logs (options: SERVICE=web, FOLLOW=true, TAIL=200)
  #   cmds:
  #     - |
  #       F=""
  #       [ "{{.FOLLOW}}" = "true" ] && F="-f"
  #       task _compose -- logs --no-log-prefix --timestamps $F --tail={{.TAIL}} {{.SERVICE}}
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'
  #     FOLLOW: '{{.FOLLOW | default "true"}}'
  #     TAIL: '{{.TAIL | default "200"}}'

  # ps:
  #   desc: Show container status
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'ps' }

  # exec:
  #   desc: Exec command in a running service (SERVICE=web CMD='bash')
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'exec -it {{.SERVICE}} sh -lc "{{.CMD}}"' }
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'
  #     CMD: '{{.CMD | default "bash || sh"}}'

  # sh:
  #   desc: Open shell in a running service (SERVICE=web, SHELL=bash)
  #   cmds:
  #     - task: exec
  #       vars:
  #         SERVICE: '{{.SERVICE}}'
  #         CMD: '{{.SHELL}}'
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'
  #     SHELL: '{{.SHELL | default "bash || sh"}}'

  # pull:
  #   desc: Pull images (option: SERVICE=web)
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'pull {{.SERVICE}}' }
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'

  # recreate:
  #   desc: Recreate containers without building (option: SERVICE=web)
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'up -d --force-recreate --no-deps {{.SERVICE}}' }
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'

  # scale:
  #   desc: Scale a service (SERVICE=web REPLICAS=3)
  #   cmds:
  #     - task: _compose
  #       vars: { CLI_ARGS: 'up -d --scale {{.SERVICE}}={{.REPLICAS}} {{.SERVICE}}' }
  #   vars:
  #     SERVICE: '{{.SERVICE | default ""}}'
  #     REPLICAS: '{{.REPLICAS | default "1"}}'

  # prune:
  #   desc: Remove unused containers/images/networks/volumes (DANGEROUS)
  #   cmds:
  #     - docker system prune -f
  #     - docker volume prune -f